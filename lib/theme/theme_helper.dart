import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.primary,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          shadowColor: appTheme.blueGray1003f,
          elevation: 0,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.gray200,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(6.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 32,
        space: 32,
        color: appTheme.gray300,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray90001,
          fontSize: 18.fSize,
          fontFamily: 'Airbnb Cereal App',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray600,
          fontSize: 14.fSize,
          fontFamily: 'Airbnb Cereal App',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.indigoA20003,
          fontSize: 12.fSize,
          fontFamily: 'Airbnb Cereal App',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: appTheme.blueGray80003,
          fontSize: 45.fSize,
          fontFamily: 'Gilroy',
          fontWeight: FontWeight.w600,
        ),
        displaySmall: TextStyle(
          color: appTheme.gray90001,
          fontSize: 35.fSize,
          fontFamily: 'Airbnb Cereal App',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.gray90001,
          fontSize: 24.fSize,
          fontFamily: 'Airbnb Cereal App',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 13.fSize,
          fontFamily: 'Airbnb Cereal App',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 10.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 22.fSize,
          fontFamily: 'Airbnb Cereal App',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray90001.withOpacity(0.65),
          fontSize: 18.fSize,
          fontFamily: 'Airbnb Cereal App',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: Color(0XFF060518),
          fontSize: 14.fSize,
          fontFamily: 'Airbnb Cereal App',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFFFFFFF),
    primaryContainer: Color(0XFF484D70),
    secondaryContainer: Color(0XFF111029),

    // Error colors
    errorContainer: Color(0XFF29D697),
    onError: Color(0X75FFFFFF),
    onErrorContainer: Color(0XFF172B4D),

    // On colors(text colors)
    onPrimary: Color(0X1E2E2E4E),
    onPrimaryContainer: Color(0XFF060518),
    onSecondaryContainer: Color(0XFF7974E7),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue50 => Color(0XFFEBF5FC);
  Color get blueA400 => Color(0XFF1977F3);

  // BlueGrayf
  Color get blueGray1003f => Color(0X3FD2D4E2);
  Color get blueGray6000f => Color(0X0F4F5588);
  Color get blueGray6000f01 => Color(0X0F575C8A);

  // BlueGray
  Color get blueGray200 => Color(0XFFADAFBB);
  Color get blueGray20001 => Color(0XFFB0B1BB);
  Color get blueGray20002 => Color(0XFFB0B1BC);
  Color get blueGray20003 => Color(0XFFB8B6C7);
  Color get blueGray400 => Color(0XFF848688);
  Color get blueGray500 => Color(0XFF716E90);
  Color get blueGray50001 => Color(0XFF6F6D8F);
  Color get blueGray60011 => Color(0X1152588F);
  Color get blueGray800 => Color(0XFF2C3550);
  Color get blueGray80001 => Color(0XFF334A66);
  Color get blueGray80002 => Color(0XFF3C3E56);
  Color get blueGray80003 => Color(0XFF37364A);
  Color get blueGray900 => Color(0XFF2A2749);

  // Cyan
  Color get cyan30014 => Color(0X144AD2E4);
  Color get cyanA400 => Color(0XFF00F8FF);

  // DeepOrange
  Color get deepOrange300 => Color(0XFFF59762);
  Color get deepOrange30001 => Color(0XFFFF8D5C);

  // DeepPurple
  Color get deepPurple50 => Color(0XFFECEBFC);
  Color get deepPurpleA200 => Color(0XFF7D67EE);

  // Gray
  Color get gray100 => Color(0XFFF4F4FE);
  Color get gray200 => Color(0XFFEEEEEE);
  Color get gray20001 => Color(0XFFEEEBEB);
  Color get gray300 => Color(0XFFDDDDDD);
  Color get gray30001 => Color(0XFFE4DEDE);
  Color get gray50 => Color(0XFFF9F9F9);
  Color get gray500 => Color(0XFF9A9A9A);
  Color get gray50001 => Color(0XFF979797);
  Color get gray50002 => Color(0XFF9799A5);
  Color get gray50003 => Color(0XFF9D9898);
  Color get gray600 => Color(0XFF747688);
  Color get gray60001 => Color(0XFF757575);
  Color get gray60002 => Color(0XFF6F6C6C);
  Color get gray60003 => Color(0XFF7F7979);
  Color get gray70019 => Color(0X19595959);
  Color get gray800 => Color(0XFF3F434A);
  Color get gray900 => Color(0XFF0D0C26);
  Color get gray90001 => Color(0XFF110C26);
  Color get gray90002 => Color(0XFF200E32);

  // Grayf
  Color get gray4007f => Color(0X7FB2B2B2);

  // Indigo
  Color get indigo200 => Color(0XFFA19EEF);
  Color get indigo20021 => Color(0X219CB1D5);
  Color get indigoA200 => Color(0XFF5A61FF);
  Color get indigoA20001 => Color(0XFF6B7AED);
  Color get indigoA20002 => Color(0XFF5C56F3);
  Color get indigoA20003 => Color(0XFF5668FF);
  Color get indigoA20026 => Color(0X265568FF);
  Color get indigoA400 => Color(0XFF3D55F0);
  Color get indigoA40001 => Color(0XFF4A43EB);
  Color get indigoA700 => Color(0XFF3F38DD);

  // Indigof
  Color get indigo3003f => Color(0X3F6F7DC8);

  // LightBlue
  Color get lightBlueA200 => Color(0XFF46CCFA);
  Color get lightBlueA20001 => Color(0XFF38D0F2);

  // Orange
  Color get orange200 => Color(0XFFFFCD6B);
  Color get orange300 => Color(0XFFF8A85E);
  Color get orange30001 => Color(0XFFFABD47);

  // Red
  Color get red400 => Color(0XFFEB5757);
  Color get red40001 => Color(0XFFEF635A);
  Color get red40002 => Color(0XFFEE544A);
  Color get red600 => Color(0XFFE43E2B);

  // Teal
  Color get tealA700 => Color(0XFF00B6AA);

  // White
  Color get whiteA700 => Color(0XFFFEFEFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
